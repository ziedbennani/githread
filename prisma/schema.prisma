// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


//NextAuth 

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

// App
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  username      String
  bio           String?
  link          String?
  createdAt     DateTime  @default(now())
  

  followers     Follow[]  @relation("follower")
  followeds     Follow[]  @relation("followed")
  posts         Post[]
  likes         Like[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Post {
  id        String   @id @default(cuid())
  content   String
  parentId  String?
  userId    String
  createdAt DateTime @default(now())

  likes     Like[]
  replies   Post[]   @relation("comments")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Post?    @relation("comments", fields: [parentId], references: [id], onDelete: Cascade)
}

model Like {
  id          String   @id @default(cuid())
  userId      String 
  postId      String
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follow {
  id            String   @id @default(cuid())
  followerId    String
  followingId   String
  createdAt     DateTime @default(now())

  follower      User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followed      User     @relation("followed", fields: [followingId], references: [id], onDelete: Cascade)


}